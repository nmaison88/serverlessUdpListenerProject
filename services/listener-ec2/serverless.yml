service: listener-ec2

plugins:
  - serverless-functions-base-path # this allows us to use the src directory structure which makes it easier in a monorepo

custom:
  functionsBasePath: src # this is where we tell it what dir to use

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${file(../../serverless.common.yml):stage} # stage is shared among all packages so we use the common.yml to set
  region: ${file(../../serverless.common.yml):region} # region is shared among all packages so we use the common.yml to set

environment:
  SQS_QUEUE: ${self:provider.stage}-${self:service}

resources:
  Resources:
    # EcsInstance:
    #   Type: AWS::ECS::Service
    #   Properties:
    #     DesiredCount: # The number of instantiations of the specified task
    #     LaunchType: EC2 # can be one of EC2 | EXTERNAL | FARGATE
    #     LoadBalancers:  !Ref loadBalancer
    #     # NetworkConfiguration: dont know if i need this
    #     Role: !Ref Ec2IamRoleForSqs

    # YourEC2Instance:
    #   Type: AWS::EC2::Instance
    #   Properties:
    #     ImageId: ami-0dd273d94ed0540c0 # this one is an us-west-2 image
    #     KeyName: ${env:EC2_KEY_NAME} # this is the .pem keyname you have, if you dont have it you need to create one first
    #     InstanceType: t2.micro
    #     # SubnetId: # if you have specific ones other than default, set here
    #     # SecurityGroupIds: # if you have specific ones other than default, set here

    Ec2IamRoleForSqs:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ec2SqsPermissions-${self:provider.stage}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: sqsPolicies-${self:provider.stage}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:'*'
                  Resource:
                    - { Fn::ImportValue: '${self:provider.stage}:SqsQueueArn' }
                - Effect: Allow
                  Action:
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:BatchGetImage
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'

              # Path: /
              # ManagedPolicyArns:
              #   - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess

    ECSCluster:
      Type: AWS::ECS::Cluster

    ECSService:
      Type: AWS::ECS::Service
      Properties:
        Cluster:
          Ref: 'ECSCluster'
        DesiredCount: 1
        TaskDefinition:
          Ref: 'ECSTaskDefinition'

    ECSTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        RequiresCompatibilities:
          - "EC2"
        ContainerDefinitions:
          - Image: ${env:ECR_IMAGE}
            Name: udpListener
            MemoryReservation: 300
            PortMappings:
            - ContainerPort: 8000
              Protocol: udp
        ExecutionRoleArn: !Ref Ec2IamRoleForSqs
        NetworkMode: host
        TaskRoleArn: !Ref Ec2IamRoleForSqs
